<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emgu.CV.ML</name>
    </assembly>
    <members>
        <member name="T:Emgu.CV.ML.ANN_MLP">
            <summary>
            Neural network
            </summary>
        </member>
        <member name="P:Emgu.CV.ML.IStatModel.StatModelPtr">
            <summary>
            Return the pointer to the algorithm object
            </summary>
            <returns>The pointer to the algorithm object</returns>
        </member>
        <member name="M:Emgu.CV.ML.ANN_MLP.#ctor(Emgu.CV.ML.ANN_MLP.Params)">
            <summary>
            Create a neural network using the specific parameters
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.ANN_MLP.DisposeObject">
            <summary>
            Release the memory associated with this neural network
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.Boost">
            <summary>
            Boost Tree 
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.Boost.#ctor(Emgu.CV.ML.Boost.Params)">
            <summary>
            Create a default Boost classifier
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.Boost.DisposeObject">
            <summary>
            Release the Boost classifier and all memory associate with it
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.DTree">
            <summary>
            Decision Tree 
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.DTree.#ctor(Emgu.CV.ML.DTree.Params)">
            <summary>
            Create a default decision tree
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.DTree.DisposeObject">
            <summary>
            Release the decision tree and all the memory associate with it
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.EM">
            <summary>
            Expectation Maximization model
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.EM.#ctor(Emgu.CV.ML.EM.Params)">
            <summary>
            Create an Expectation Maximization model
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.EM.Predict(Emgu.CV.IInputArray,Emgu.CV.IOutputArray)">
            <summary>
            Predit the probability of the <paramref name="samples"/>
            </summary>
            <param name="samples">The input samples</param>
            <param name="probs">The prediction results, should have the same # of rows as the <paramref name="samples"/></param>
        </member>
        <member name="M:Emgu.CV.ML.EM.DisposeObject">
            <summary>
            Release the memory associated with this EM model
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.EM.Params.#ctor(System.Int32,Emgu.CV.ML.MlEnum.EmCovarianMatrixType,Emgu.CV.Structure.MCvTermCriteria)">
            <summary>
            Create EM parameters
            </summary>
            <param name="nclusters">The number of mixture components in the Gaussian mixture model. Use 5 for default.</param>
            <param name="covMatType">Constraint on covariance matrices which defines type of matrices</param>
            <param name="termcrit">The termination criteria of the EM algorithm. The EM algorithm can be terminated by the number of iterations termCrit.maxCount (number of M-steps) or when relative change of likelihood logarithm is less than termCrit.epsilon. Default maximum number of iterations is 100</param>
        </member>
        <member name="T:Emgu.CV.ML.KNearest">
            <summary>
            The KNearest classifier
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.KNearest.#ctor(System.Int32,System.Boolean)">
            <summary>
            Create a default KNearest classifier
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.KNearest.DisposeObject">
            <summary>
            Release the classifer and all the memory associated with it
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.NormalBayesClassifier">
            <summary>
            A Normal Bayes Classifier
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.NormalBayesClassifier.#ctor">
            <summary>
            Create a normal Bayes classifier
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.NormalBayesClassifier.DisposeObject">
            <summary>
            Release the memory associated with this classifier
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.Structure.MCvDTreeNode">
            <summary>
            An OpenCV decision Tree Node
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.classIdx">
            <summary>
            The assigned to the node normalized class index (to 0..class_count-1 range), it is used internally in classification trees and tree ensembles.
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.Tn">
            <summary>
            The tree index in a ordered sequence of trees. The indices are used during and after the pruning procedure. The root node has the maximum value Tn  of the whole tree, child nodes have Tn less than or equal to the parent's Tn, and the nodes with Tn&lt;=CvDTree::pruned_tree_idx are not taken into consideration at the prediction stage (the corresponding branches are considered as cut-off), even if they have not been physically deleted from the tree at the pruning stage. 
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.value">
            <summary>
            The value assigned to the tree node. It is either a class label, or the estimated function value.
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.parent">
            <summary>
            Pointer to the parent tree node
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.left">
            <summary>
            Pointer to the left tree node
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.right">
            <summary>
            Pointer to the right tree node
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.split">
            <summary>
            Pointer to CvDTreeSplit
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.sampleCount">
             <summary>
             The number of samples that fall into the node at the training stage. It is used to resolve the difficult cases - when the variable for the primary split is missing, and all the variables for other surrogate splits are missing too,
            the sample is directed to the left if left-&gt;sample_count&gt;right-&gt;sample_count and to the right otherwise
             </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.depth">
            <summary>
            The node depth, the root node depth is 0, the child nodes depth is the parent's depth + 1. 
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.numValid">
            <summary>
            Internal parameters
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.offset">
            <summary>
            Internal parameters
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.bufIdx">
            <summary>
            Internal parameters
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.maxlr">
            <summary>
            Internal parameters
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.complexity">
            <summary>
            Global pruning data
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.alpha">
            <summary>
            Global pruning data
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.nodeRisk">
            <summary>
            Global pruning data
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.treeRisk">
            <summary>
            Global pruning data
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.treeError">
            <summary>
            Global pruning data
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.cvTn">
            <summary>
            Cross-validation pruning data
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.cvNodeRisk">
            <summary>
            Cross-validation pruning data
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeNode.cvNodeError">
            <summary>
            Cross-validation pruning data
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.Structure.MCvDTreeSplit">
            <summary>
            Decision tree node split
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeSplit.var_idx">
            <summary>
            Index of the variable used in the split 
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeSplit.inversed">
            <summary>
            When it equals to 1, the inverse split rule is used (i.e. left and right branches are exchanged in the expressions below)
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeSplit.quality">
            <summary>
            The split quality, a positive number. It is used to choose the best primary split, then to choose and sort the surrogate splits. After the tree is constructed, it is also used to compute variable importance
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeSplit.next">
            <summary>
            Pointer to the next split in the node split list
            </summary>
        </member>
        <member name="P:Emgu.CV.ML.Structure.MCvDTreeSplit.Order">
            <summary>
            Get or Set the Order of this TreeSplit
            </summary>
        </member>
        <member name="P:Emgu.CV.ML.Structure.MCvDTreeSplit.Subset">
            <summary>
            Get the bit array indicating the value subset in case of split on a categorical variable.
            The rule is: if var_value in subset then next_node&lt;-left else next_node&lt;-right
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.Structure.MCvDTreeSplit.MOrder">
            <summary>
            Wrapped Order structure
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeSplit.MOrder.c">
            <summary>
            The threshold value in case of split on an ordered variable.
            The rule is: if var_value &lt; c then next_node&lt;-left else next_node&lt;-right
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvDTreeSplit.MOrder.split_point">
            <summary>
            Used internally by the training algorithm
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.Structure.MCvParamGrid">
            <summary>
            Wrapped CvParamGrid structure used by SVM
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvParamGrid.min_val">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvParamGrid.max_val">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.Structure.MCvParamGrid.step">
            <summary>
            step
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.MlEnum.EmCovarianMatrixType">
            <summary>
            The type of the mixture covariation matrices
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.EmCovarianMatrixType.Spherical">
            <summary>
            A covariation matrix of each mixture is a scaled identity matrix, ?k*I, so the only parameter to be estimated is ?k. The option may be used in special cases, when the constraint is relevant, or as a first step in the optimization (e.g. in case when the data is preprocessed with PCA). The results of such preliminary estimation may be passed again to the optimization procedure, this time with cov_mat_type=COV_MAT_DIAGONAL
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.EmCovarianMatrixType.Diagonal">
            <summary>
            A covariation matrix of each mixture may be arbitrary diagonal matrix with positive diagonal elements, that is, non-diagonal elements are forced to be 0's, so the number of free parameters is d  for each matrix. This is most commonly used option yielding good estimation results
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.EmCovarianMatrixType.Generic">
            <summary>
            A covariation matrix of each mixture may be arbitrary symmetrical positively defined matrix, so the number of free parameters in each matrix is about d2/2. It is not recommended to use this option, unless there is pretty accurate initial estimation of the parameters and/or a huge number of training samples
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.MlEnum.SvmType">
            <summary>
            Type of SVM
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmType.CSvc">
            <summary>
            n-class classification (n>=2), allows imperfect separation of classes with penalty multiplier C for outliers
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmType.NuSvc">
            <summary>
            n-class classification with possible imperfect separation. Parameter nu (in the range 0..1, the larger the value, the smoother the decision boundary) is used instead of C
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmType.OneClass">
            <summary>
            one-class SVM. All the training data are from the same class, SVM builds a boundary that separates the class from the rest of the feature space
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmType.EpsSvr">
            <summary>
            Regression. The distance between feature vectors from the training set and the fitting hyper-plane must be less than p. For outliers the penalty multiplier C is used
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmType.NuSvr">
            <summary>
            Regression; nu is used instead of p.
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.MlEnum.SvmParamType">
            <summary>
            The type of SVM parameters
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmParamType.C">
            <summary>
            C
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmParamType.Gamma">
            <summary>
            Gamma
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmParamType.P">
            <summary>
            P
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmParamType.Nu">
            <summary>
            NU
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmParamType.Coef">
            <summary>
            COEF
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmParamType.Degree">
            <summary>
            DEGREE
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.MlEnum.SvmKernelType">
            <summary>
            SVM kernel type
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmKernelType.Linear">
            <summary>
            No mapping is done, linear discrimination (or regression) is done in the original feature space. It is the fastest option. d(x,y) = x y == (x,y)
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmKernelType.Poly">
            <summary>
            polynomial kernel: d(x,y) = (gamma*(xy)+coef0)^degree
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmKernelType.Rbf">
            <summary>
            Radial-basis-function kernel; a good choice in most cases: d(x,y) = exp(-gamma*|x-y|^2)
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.SvmKernelType.Sigmoid">
            <summary>
            sigmoid function is used as a kernel: d(x,y) = tanh(gamma*(xy)+coef0)
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.MlEnum.AnnMlpTrainMethod">
            <summary>
            Training method for ANN_MLP
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.AnnMlpTrainMethod.Backprop">
            <summary>
            Back-propagation algorithmn
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.AnnMlpTrainMethod.Rprop">
            <summary>
            Batch RPROP algorithm
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.MlEnum.AnnMlpActivationFunction">
            <summary>
            Possible activation functions
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.AnnMlpActivationFunction.Identity">
            <summary>
            Identity
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.AnnMlpActivationFunction.SigmoidSym">
            <summary>
            sigmoid symetric
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.AnnMlpActivationFunction.Gaussian">
            <summary>
            Gaussian
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.MlEnum.AnnMlpTrainingFlag">
            <summary>
            The flags for the neural network training function
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.AnnMlpTrainingFlag.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.AnnMlpTrainingFlag.UpdateWeights">
            <summary>
            
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.AnnMlpTrainingFlag.NoInputScale">
            <summary>
            
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.AnnMlpTrainingFlag.NoOutputScale">
            <summary>
            
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.MlEnum.DataLayoutType">
            <summary>
            The data layout type
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.DataLayoutType.ColSample">
            <summary>
            Feature vectors are stored as cols
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.DataLayoutType.RowSample">
            <summary>
            Feature vectors are stored as rows
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.MlEnum.BoostType">
            <summary>
            Boosting type
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.BoostType.Discrete">
            <summary>
            Discrete AdaBoost
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.BoostType.Real">
            <summary>
            Real AdaBoost
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.BoostType.Logit">
            <summary>
            LogitBoost
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.BoostType.Gentle">
            <summary>
            Gentle AdaBoost
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.MlEnum.BoostSplitCreiteria">
            <summary>
            Splitting criteria, used to choose optimal splits during a weak tree construction
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.BoostSplitCreiteria.Default">
            <summary>
            Use the default criteria for the particular boosting method, see below
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.BoostSplitCreiteria.Gini">
            <summary>
            Use Gini index. This is default option for Real AdaBoost; may be also used for Discrete AdaBoost
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.BoostSplitCreiteria.Misclass">
            <summary>
            Use misclassification rate. This is default option for Discrete AdaBoost; may be also used for Real AdaBoost
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.BoostSplitCreiteria.Sqerr">
            <summary>
            Use least squares criteria. This is default and the only option for LogitBoost and Gentle AdaBoost
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.MlEnum.VarType">
            <summary>
            Variable type
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.VarType.Numerical">
            <summary>
            Numerical or Ordered
            </summary>
        </member>
        <member name="F:Emgu.CV.ML.MlEnum.VarType.Categorical">
            <summary>
            Catagorical
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.MlInvoke">
            <summary>
            This class contains functions to call into machine learning library
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.StatModelSave(System.IntPtr,System.IntPtr)">
            <summary>
            Save the statistic model to the specific file
            </summary>
            <param name="statModel">The statistic model to save</param>
            <param name="fileName">The file name to save to</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.StatModelClear(System.IntPtr)">
            <summary>
            Clear the statistic model
            </summary>
            <param name="statModel">The model to be cleared</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvNormalBayesClassifierDefaultCreate(System.IntPtr@,System.IntPtr@)">
            <summary>
            Create a normal bayes classifier
            </summary>
            <returns>The normal bayes classifier</returns>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvNormalBayesClassifierRelease(System.IntPtr@)">
            <summary>
            Release the memory associated with the bayes classifier
            </summary>
            <param name="classifier">The classifier to release</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvKNearestCreate(System.Int32,System.Boolean,System.IntPtr@,System.IntPtr@)">
            <summary>
            Create a KNearest classifier
            </summary>
            <returns>The KNearest classifier</returns>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvKNearestRelease(System.IntPtr@)">
            <summary>
            Release the KNearest classifier
            </summary>
            <param name="knearest">The classifier to release</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvEMDefaultCreate(System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            Create a default EM model
            </summary>
            <returns>Pointer to the EM model</returns>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvEMRelease(System.IntPtr@)">
            <summary>
            Release the EM model
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvEMPredict(System.IntPtr,System.IntPtr,Emgu.CV.Structure.MCvPoint2D64f@,System.IntPtr)">
            <summary>
            Given the EM <paramref name="model"/>, predit the probability of the <paramref name="samples"/>
            </summary>
            <param name="model">The EM model</param>
            <param name="samples">The input samples</param>
            <param name="probs">The prediction results, should have the same # of rows as the <paramref name="samples"/></param>
            <returns>In case of classification the method returns the class label, in case of regression - the output function value</returns>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvSVMDefaultCreate(System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            Create a default SVM model
            </summary>
            <returns>Pointer to the SVM model</returns>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvSVMRelease(System.IntPtr@)">
            <summary>
            Release the SVM model and all the memory associated to ir
            </summary>
            <param name="model">The SVM model to be released</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvSVMGetDefaultGrid(Emgu.CV.ML.MlEnum.SvmParamType,Emgu.CV.ML.Structure.MCvParamGrid@)">
            <summary>
            Get the default parameter grid for the specific SVM type
            </summary>
            <param name="type">The SVM type</param>
            <param name="grid">The parameter grid reference, values will be filled in by the funtion call</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvSVMTrainAuto(System.IntPtr,System.IntPtr,System.Int32,Emgu.CV.ML.Structure.MCvParamGrid@,Emgu.CV.ML.Structure.MCvParamGrid@,Emgu.CV.ML.Structure.MCvParamGrid@,Emgu.CV.ML.Structure.MCvParamGrid@,Emgu.CV.ML.Structure.MCvParamGrid@,Emgu.CV.ML.Structure.MCvParamGrid@,System.Boolean)">
            <summary>
            The method trains the SVM model automatically by choosing the optimal parameters C, gamma, p, nu, coef0, degree from CvSVMParams. By the optimality one mean that the cross-validation estimate of the test set error is minimal. 
            </summary>
            <param name="model">The SVM model</param>
            <param name="trainData">The training data.</param>
            <param name="kFold">Cross-validation parameter. The training set is divided into k_fold subsets, one subset being used to train the model, the others forming the test set. So, the SVM algorithm is executed k_fold times</param>
            <param name="cGrid">cGrid</param>
            <param name="gammaGrid">gammaGrid</param>
            <param name="pGrid">pGrid</param>
            <param name="nuGrid">nuGrid</param>
            <param name="coefGrid">coedGrid</param>
            <param name="degreeGrid">degreeGrid</param>
            <returns></returns>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvSVMGetSupportVectors(System.IntPtr,System.IntPtr)">
            <summary>
            The method retrieves a given support vector
            </summary>
            <param name="model">The SVM model</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvANN_MLPRelease(System.IntPtr@)">
            <summary>
            Release the ANN_MLP model
            </summary>
            <param name="model">The ANN_MLP model to be released</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvDTreeParamsCreate(System.Int32,System.Int32,System.Double,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean,System.IntPtr)">
            <summary>
            Create default parameters for CvDTreeParams
            </summary>
            <returns>Pointer to the default CvDTreeParams</returns>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvDTreeParamsRelease(System.IntPtr@)">
            <summary>
            Release the CvDTreeParams
            </summary>
            <param name="dTreeParam">Pointer to the decision tree parameters to be released</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvDTreeCreate(System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            Create a default decision tree
            </summary>
            <returns>Pointer to the decision tree</returns>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvDTreeRelease(System.IntPtr@)">
            <summary>
            Release the decision tree model
            </summary>
            <param name="model">The decision tree model to be released</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvRTParamsCreate(System.Int32,System.Int32,System.Double,System.Boolean,System.Int32,System.IntPtr,System.Boolean,System.Int32,Emgu.CV.Structure.MCvTermCriteria@)">
            <summary>
            Create default parameters for CvRTParams
            </summary>
            <returns>Pointer to the default CvRTParams</returns>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvRTParamsRelease(System.IntPtr@)">
            <summary>
            Release the CvRTParams
            </summary>
            <param name="rTreesParam">Pointer to the random tree parameters to be released</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvRTreesCreate(System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            Create a default random tree
            </summary>
            <returns>Pointer to the random tree</returns>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvRTreesRelease(System.IntPtr@)">
            <summary>
            Release the random tree model
            </summary>
            <param name="model">The random tree model to be released</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvBoostParamsCreate(System.Int32,System.Int32,System.Double,System.Int32,System.Boolean,System.IntPtr)">
            <summary>
            Create default parameters for CvBoost
            </summary>
            <returns>Pointer to the default CvBoostParams</returns>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvBoostParamsRelease(System.IntPtr@)">
            <summary>
            Release the CvBoostParams
            </summary>
            <param name="bTreeParam">Pointer to the boost tree parameters to be released</param>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvBoostCreate(System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            Create a default boost classifier
            </summary>
            <returns>Pointer to the boost classifier</returns>
        </member>
        <member name="M:Emgu.CV.ML.MlInvoke.CvBoostRelease(System.IntPtr@)">
            <summary>
            Release the boost classifier
            </summary>
            <param name="model">The boost classifier to be released</param>
        </member>
        <member name="T:Emgu.CV.ML.RTrees">
            <summary>
            Random tree
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.RTrees.#ctor(Emgu.CV.ML.RTrees.Params)">
            <summary>
            Create a random tree
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.RTrees.DisposeObject">
            <summary>
            Release the random tree and all memory associate with it
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.StatModelExtensions">
            <summary>
            A statistic model
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.StatModelExtensions.Save(Emgu.CV.ML.IStatModel,System.String)">
            <summary>
            Save the statistic model to file
            </summary>
            <param name="fileName">The file name where this StatModel will be saved</param>
        </member>
        <member name="M:Emgu.CV.ML.StatModelExtensions.Clear(Emgu.CV.ML.IStatModel)">
            <summary>
            Clear the statistic model
            </summary>
        </member>
        <member name="T:Emgu.CV.ML.SVM">
            <summary>
            Support Vector Machine 
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.SVM.#ctor(Emgu.CV.ML.SVM.Params)">
            <summary>
            Create a support Vector Machine
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.SVM.DisposeObject">
            <summary>
            Release all the memory associated with the SVM
            </summary>
        </member>
        <member name="M:Emgu.CV.ML.SVM.GetDefaultGrid(Emgu.CV.ML.MlEnum.SvmParamType)">
            <summary>
            Get the default parameter grid for the specific SVM type
            </summary>
            <param name="type">The SVM type</param>
            <returns>The default parameter grid for the specific SVM type </returns>
        </member>
        <member name="M:Emgu.CV.ML.SVM.TrainAuto(Emgu.CV.ML.TrainData,System.Int32)">
            <summary>
            The method trains the SVM model automatically by choosing the optimal parameters C, gamma, p, nu, coef0, degree from CvSVMParams. By the optimality one mean that the cross-validation estimate of the test set error is minimal. 
            </summary>
            <param name="trainData">The training data.</param>
            <param name="kFold">Cross-validation parameter. The training set is divided into k_fold subsets, one subset being used to train the model, the others forming the test set. So, the SVM algorithm is executed k_fold times</param>
            <returns></returns>
        </member>
        <member name="M:Emgu.CV.ML.SVM.TrainAuto(Emgu.CV.ML.TrainData,System.Int32,Emgu.CV.ML.Structure.MCvParamGrid,Emgu.CV.ML.Structure.MCvParamGrid,Emgu.CV.ML.Structure.MCvParamGrid,Emgu.CV.ML.Structure.MCvParamGrid,Emgu.CV.ML.Structure.MCvParamGrid,Emgu.CV.ML.Structure.MCvParamGrid,System.Boolean)">
            <summary>
            The method trains the SVM model automatically by choosing the optimal parameters C, gamma, p, nu, coef0, degree from CvSVMParams. By the optimality one mean that the cross-validation estimate of the test set error is minimal. 
            </summary>
            <param name="trainData">The training data.</param>
            <param name="kFold">Cross-validation parameter. The training set is divided into k_fold subsets, one subset being used to train the model, the others forming the test set. So, the SVM algorithm is executed k_fold times</param>
            <param name="cGrid">cGrid</param>
            <param name="gammaGrid">gammaGrid</param>
            <param name="pGrid">pGrid</param>
            <param name="nuGrid">nuGrid</param>
            <param name="coefGrid">coedGrid</param>
            <param name="degreeGrid">degreeGrid</param>
            <returns></returns>
        </member>
        <member name="T:Emgu.CV.ML.TrainData">
            <summary>
            Train data
            </summary>
        </member>
    </members>
</doc>
